openapi: 3.0.2

info:
  title: Finance API
  version: 1.0.0
  contact:
    url: https://github.com/Adeynack

servers:
  - url: http://localhost:3000/v1
    description: Local Server

tags:
  - name: session
    description: Login / Logout / Session information.
  - name: books
    description: Book management.

paths:
  '/session':
    post:
      summary: Create a new session (login).
      tags: ['session']
      operationId: CreateSession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
              example:
                email: joe@example.com
                password: foobar
      responses:
        201:
          description: Credentials are accepted and session was created.
    get:
      summary: Get current session's information.
      tags: ['session']
      security:
        - SessionAuth: []
      operationId: GetSession
      responses:
        200:
          description: Session information.

  '/books':
    get:
      summary: List the books to which the current user has access to.
      tags: ['books']
      operationId: ListBooks
      responses:
        '200':
          description: List the books to which the current user has access to.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book.
      tags: ['books']
      operationId: CreateBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_Write'
      responses:
        '201':
          description: Book was created. Its representation is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  '/books/{book_id}':
    parameters:
      - $ref: '#/components/parameters/BookID'
    get:
      summary: Get information on one book.
      tags: ['books']
      operationId: GetBook
      responses:
        '200':
          description: Information on the specified book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    patch:
      summary: Update properties of a book.
      tags: ['books']
      operationId: UpdateBook
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Book_Write'
      responses:
        '200':
          description: Book is updated. Its representation is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Deletes a book.
      tags: ['books']
      operationId: DeleteBook
      responses:
        '204':
          description: The book is deleted. No content returned.

components:
  securitySchemes:
    SessionAuth:
      description: An authenticated session is in progress.
      type: http
      scheme: bearer

  parameters: #------------------------------------------------------------------------------------
    BookID:
      description: The book's identifier.
      name: book_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      example: 238bfbb1-55f6-4614-8d7f-26edde264525

  schemas: #---------------------------------------------------------------------------------------
    Book_Base:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 238bfbb1-55f6-4614-8d7f-26edde264525
        name:
          type: string
          example: Dave's Book

    Book_Write:
      description: A book for writing.
      allOf:
        - $ref: '#/components/schemas/Book_Base'
        - type: object
          required:
            - owner_id
          properties:
            owner_id:
              description: ID of the owner of the book.
              type: string
              example: 54332d2f-2a60-4e34-b4a7-72fb7167e1a0

    Book:
      description: A book.
      allOf:
        - $ref: '#/components/schemas/Book_Base'
        - type: object
          required:
            - owner
          properties:
            owner:
              type: object
              required:
                - id
                - display_name
              properties:
                id:
                  description: ID of the owner of the book.
                  type: string
                  example: 54332d2f-2a60-4e34-b4a7-72fb7167e1a0
                display_name:
                  description: Name of the user.
                  type: string
                  example: Max
