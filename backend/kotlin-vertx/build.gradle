import javax.xml.bind.JAXB

group 'com.github.adeynack'
version '1.0-SNAPSHOT'

buildscript {
    ext {
        kotlin_version = '1.2.50'
        vertx_version = '3.5.2'
        jackson_version = '2.9.5' // has to align with Jackson version in Vert.x
        woodstock_version = "5.1.0"
        hocon_version = "1.3.2"
        postgresql_version = '42.2.2'
        flyway_version = '5.0.7'
        jooq_version = '3.10.1'
        hikari_version = '2.7.3'
        logback_version = '1.2.1'
        kotlin_logging_version = '1.5.4'

        junitJupiter_version = "5.2.0"
        assertj_version = "3.10.0"
        json_assert_version = "1.5.0"
    }
    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.postgresql:postgresql:$postgresql_version"
        classpath "org.flywaydb:flyway-gradle-plugin:$flyway_version"
        classpath "org.jooq:jooq-codegen:$jooq_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.flywaydb.flyway'

mainClassName = 'com.github.adeynack.finances.service.MainKt.main'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {

    //
    // PRODUCTION
    //

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // VERT.X
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin:$vertx_version"
    compile "io.vertx:vertx-web-client:$vertx_version"

    // Serialization
    compile "com.typesafe:config:$hocon_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    compile "com.fasterxml.woodstox:woodstox-core:$woodstock_version"

    // Database
    compile "org.flywaydb:flyway-core:$flyway_version"
    compile "org.postgresql:postgresql:$postgresql_version"
    compile "org.jooq:jooq:$jooq_version"
    compile "com.zaxxer:HikariCP:$hikari_version"

    // Utilities
    compile "ch.qos.logback:logback-classic:$logback_version"
    compile "io.github.microutils:kotlin-logging:$kotlin_logging_version"

    //
    // TEST
    //

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiter_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitJupiter_version"

    testCompile "io.vertx:vertx-junit5:$vertx_version"

    testCompile "org.assertj:assertj-core:$assertj_version"

    testCompile "org.skyscreamer:jsonassert:$json_assert_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/jooq'
        }
    }
}

test {
    useJUnitPlatform()
}

task runProd(type: JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args = [
            "-config=src/main/resources/production.conf"
    ]
}

task('generateJooqSource') {
    doLast {
        def writer = new StringWriter()
        new groovy.xml.MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
            jdbc() {
                driver 'org.postgresql.Driver'
                url project.findProperty('jooq.url')
                user project.findProperty('jooq.user')
                password project.findProperty('jooq.password')
            }
            generator() {
                database() {
                    name 'org.jooq.util.postgres.PostgresDatabase'
                    inputSchema project.findProperty('jooq.schema')
                    forcedTypes() {
                        forcedType() {
                            name 'varchar'
                            expression '.*'
                            types 'JSONB?'
                        }
                    }
                    excludes 'schema_version'
                }

                generate([:]) {
                    relations true
                    deprecated true
                    records true
                    immutablePojos true
                    fluentSetters true
                }
                target() {
                    packageName('com.github.adeynack.finances.service.jooq.generated')
                    directory('src/main/jooq')
                }
            }
        }

        org.jooq.util.GenerationTool.generate(
                JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
        )
    }
}
